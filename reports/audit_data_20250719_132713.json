{
  "project_name": "",
  "timestamp": "2025-07-19T13:27:13.667012",
  "before_metrics": {
    "coverage_percentage": 0.0,
    "mutation_score": 0.0,
    "assertion_density": 0.0,
    "test_clarity_score": 5.0,
    "complexity_score": 1.0,
    "mock_coverage": 0.0,
    "total_tests": 21,
    "total_assertions": 0,
    "total_mocks": 0,
    "uncovered_units": [
      "LiteLLMWrapper",
      "TestDiscoveryAgent._calculate_complexity",
      "AuditReporterAgent.__init__",
      "factorial",
      "_get_function_signature",
      "_improve_tests_iteratively",
      "TestingFramework",
      "TestJudgeAgent.__init__",
      "_print_metrics",
      "_parse_judgment_response",
      "TestAssessorAgent.__init__",
      "TestingFramework._identify_uncovered_units",
      "CalculationResult",
      "TestingFramework._parse_mutmut_results",
      "_classify_test_type",
      "TestingFramework._print_metrics",
      "CodeType",
      "CodeMapperAgent.build_dependency_graph",
      "TestJudgeAgent._parse_judgment_response",
      "_setup_environment",
      "_run_mutation_testing",
      "TestJudgeAgent.judge_test",
      "_identify_uncovered_units",
      "LLMConfig.__init__",
      "_call",
      "AuditReport.get_improvement_summary",
      "sin",
      "TestAssessorAgent",
      "Calculator.multiply",
      "divide",
      "CodeUnit",
      "Calculator.__init__",
      "ln",
      "LLMConfig",
      "CodeMapperAgent._extract_dependencies",
      "cli",
      "LLMConfig.create_llm",
      "TestingFramework._save_test_case",
      "CodeMapperAgent.__init__",
      "TestGeneratorAgent._create_test_generation_prompt",
      "average",
      "log",
      "__init__",
      "_generate_fallback_report",
      "LLMConfig.get_provider_info",
      "generate",
      "TestingFramework._generate_audit_report",
      "run_full_audit",
      "TestGeneratorAgent.generate_tests",
      "TestDiscoveryAgent",
      "TestingFramework._print_mutation_results",
      "AdvancedCalculator.cos",
      "TestDiscoveryAgent._count_mocks",
      "Calculator.add",
      "AdvancedCalculator.log",
      "analyze",
      "LLMConfig.get_default_model",
      "LLMConfig.get_default_provider",
      "MutationResults.calculate_score",
      "_identify_low_quality_units",
      "get_improvement_summary",
      "CodeMapperAgent._get_function_signature",
      "get_provider_info",
      "TestDiscoveryAgent.discover_tests",
      "TestGeneratorAgent._extract_test_code",
      "power",
      "_count_mocks_in_code",
      "Provider",
      "TestingFramework._find_code_unit",
      "map_codebase",
      "TestingFramework.__init__",
      "_save_audit_report",
      "Calculator.get_history",
      "LiteLLMWrapper._llm_type",
      "audit",
      "_llm_type",
      "LLMConfig._setup_environment",
      "add",
      "Calculator.subtract",
      "_create_report_prompt",
      "get_available_providers",
      "get_history",
      "_count_assertions_in_code",
      "TestJudgeAgent",
      "Calculator.clear_history",
      "TestType",
      "_parse_mutmut_results",
      "Calculator.divide",
      "_create_test_generation_prompt",
      "Calculator.factorial",
      "TestGeneratorAgent._count_mocks_in_code",
      "MutationResults",
      "get_statistics",
      "get_default_model",
      "Calculator.get_statistics",
      "_count_mocks",
      "Calculator._record_calculation",
      "TestingFramework.run_full_audit",
      "Calculator.average",
      "_find_code_unit",
      "display_results",
      "tan",
      "TestAssessorAgent._identify_low_quality_tests",
      "CodeUnit.__hash__",
      "TestGeneratorAgent.__init__",
      "TestDiscoveryAgent.__init__",
      "_extract_dependencies",
      "QualityMetrics.to_dict",
      "_count_assertions",
      "TestingFramework._save_audit_report",
      "Calculator.square_root",
      "TestingFramework._run_mutation_testing",
      "clear_history",
      "TestDiscoveryAgent._count_assertions",
      "square_root",
      "TestDiscoveryAgent._classify_test_type",
      "_assess_test_clarity",
      "generate_report",
      "subtract",
      "get_codebase_summary",
      "TestGeneratorAgent",
      "to_dict",
      "_identify_low_quality_tests",
      "_save_test_case",
      "multiply",
      "AdvancedCalculator.tan",
      "AuditReporterAgent._generate_fallback_report",
      "generate_tests",
      "AdvancedCalculator.sin",
      "AuditReporterAgent._create_report_prompt",
      "TestCase.__eq__",
      "judge_test",
      "AuditReport",
      "QualityMetrics",
      "Calculator.power",
      "AuditReporterAgent",
      "assess_quality",
      "display_analysis",
      "CodeMapperAgent",
      "TestGeneratorAgent._count_assertions_in_code",
      "AuditReporterAgent.generate_report",
      "TestCase.__hash__",
      "TestingFramework._improve_tests_iteratively",
      "__hash__",
      "__eq__",
      "TestingFramework._identify_low_quality_units",
      "calculate_compound_interest",
      "CodeUnit.__eq__",
      "TestDiscoveryAgent._parse_test_file",
      "get_default_provider",
      "_extract_test_code",
      "create_llm",
      "_parse_file",
      "AdvancedCalculator.__init__",
      "_record_calculation",
      "validate_number",
      "discover_tests",
      "TestingFramework.get_codebase_summary",
      "_calculate_complexity",
      "LiteLLMWrapper._call",
      "get_constant",
      "Calculator",
      "TestCase",
      "calculate_score",
      "CodeMapperAgent.map_codebase",
      "_generate_audit_report",
      "AdvancedCalculator",
      "TestAssessorAgent.assess_quality",
      "AdvancedCalculator.get_constant",
      "build_dependency_graph",
      "cos",
      "LLMConfig.get_available_providers",
      "_parse_test_file",
      "format_number",
      "_print_mutation_results",
      "AdvancedCalculator.ln",
      "CodeMapperAgent._parse_file",
      "TestAssessorAgent._assess_test_clarity"
    ],
    "low_quality_tests": [
      "test_calculator_initialization (no assertions)",
      "test_calculator_custom_precision (no assertions)",
      "test_add_operation (no assertions)",
      "test_subtract_operation (no assertions)",
      "test_multiply_operation (no assertions)",
      "test_divide_operation (no assertions)",
      "test_divide_by_zero (no assertions)",
      "test_power_operation (no assertions)",
      "test_square_root_operation (no assertions)",
      "test_square_root_negative (no assertions)",
      "test_factorial_operation (no assertions)",
      "test_factorial_zero (no assertions)",
      "test_factorial_negative (no assertions)",
      "test_average_operation (no assertions)",
      "test_average_empty_list (no assertions)",
      "test_history_recording (no assertions)",
      "test_clear_history (no assertions)",
      "test_get_statistics (no assertions)",
      "test_validate_number_valid (no assertions)",
      "test_validate_number_invalid (no assertions)",
      "test_format_number (no assertions)"
    ]
  },
  "after_metrics": {
    "coverage_percentage": 0.0,
    "mutation_score": 0.0,
    "assertion_density": 0.0,
    "test_clarity_score": 5.0,
    "complexity_score": 1.0,
    "mock_coverage": 0.0,
    "total_tests": 21,
    "total_assertions": 0,
    "total_mocks": 0,
    "uncovered_units": [
      "LiteLLMWrapper",
      "TestDiscoveryAgent._calculate_complexity",
      "AuditReporterAgent.__init__",
      "factorial",
      "_get_function_signature",
      "_improve_tests_iteratively",
      "TestingFramework",
      "TestJudgeAgent.__init__",
      "_print_metrics",
      "_parse_judgment_response",
      "TestAssessorAgent.__init__",
      "TestingFramework._identify_uncovered_units",
      "CalculationResult",
      "TestingFramework._parse_mutmut_results",
      "_classify_test_type",
      "TestingFramework._print_metrics",
      "CodeType",
      "CodeMapperAgent.build_dependency_graph",
      "TestJudgeAgent._parse_judgment_response",
      "_setup_environment",
      "_run_mutation_testing",
      "TestJudgeAgent.judge_test",
      "_identify_uncovered_units",
      "LLMConfig.__init__",
      "_call",
      "AuditReport.get_improvement_summary",
      "sin",
      "TestAssessorAgent",
      "Calculator.multiply",
      "divide",
      "CodeUnit",
      "Calculator.__init__",
      "ln",
      "LLMConfig",
      "CodeMapperAgent._extract_dependencies",
      "cli",
      "LLMConfig.create_llm",
      "TestingFramework._save_test_case",
      "CodeMapperAgent.__init__",
      "TestGeneratorAgent._create_test_generation_prompt",
      "average",
      "log",
      "__init__",
      "_generate_fallback_report",
      "LLMConfig.get_provider_info",
      "generate",
      "TestingFramework._generate_audit_report",
      "run_full_audit",
      "TestGeneratorAgent.generate_tests",
      "TestDiscoveryAgent",
      "TestingFramework._print_mutation_results",
      "AdvancedCalculator.cos",
      "TestDiscoveryAgent._count_mocks",
      "Calculator.add",
      "AdvancedCalculator.log",
      "analyze",
      "LLMConfig.get_default_model",
      "LLMConfig.get_default_provider",
      "MutationResults.calculate_score",
      "_identify_low_quality_units",
      "get_improvement_summary",
      "CodeMapperAgent._get_function_signature",
      "get_provider_info",
      "TestDiscoveryAgent.discover_tests",
      "TestGeneratorAgent._extract_test_code",
      "power",
      "_count_mocks_in_code",
      "Provider",
      "TestingFramework._find_code_unit",
      "map_codebase",
      "TestingFramework.__init__",
      "_save_audit_report",
      "Calculator.get_history",
      "LiteLLMWrapper._llm_type",
      "audit",
      "_llm_type",
      "LLMConfig._setup_environment",
      "add",
      "Calculator.subtract",
      "_create_report_prompt",
      "get_available_providers",
      "get_history",
      "_count_assertions_in_code",
      "TestJudgeAgent",
      "Calculator.clear_history",
      "TestType",
      "_parse_mutmut_results",
      "Calculator.divide",
      "_create_test_generation_prompt",
      "Calculator.factorial",
      "TestGeneratorAgent._count_mocks_in_code",
      "MutationResults",
      "get_statistics",
      "get_default_model",
      "Calculator.get_statistics",
      "_count_mocks",
      "Calculator._record_calculation",
      "TestingFramework.run_full_audit",
      "Calculator.average",
      "_find_code_unit",
      "display_results",
      "tan",
      "TestAssessorAgent._identify_low_quality_tests",
      "CodeUnit.__hash__",
      "TestGeneratorAgent.__init__",
      "TestDiscoveryAgent.__init__",
      "_extract_dependencies",
      "QualityMetrics.to_dict",
      "_count_assertions",
      "TestingFramework._save_audit_report",
      "Calculator.square_root",
      "TestingFramework._run_mutation_testing",
      "clear_history",
      "TestDiscoveryAgent._count_assertions",
      "square_root",
      "TestDiscoveryAgent._classify_test_type",
      "_assess_test_clarity",
      "generate_report",
      "subtract",
      "get_codebase_summary",
      "TestGeneratorAgent",
      "to_dict",
      "_identify_low_quality_tests",
      "_save_test_case",
      "multiply",
      "AdvancedCalculator.tan",
      "AuditReporterAgent._generate_fallback_report",
      "generate_tests",
      "AdvancedCalculator.sin",
      "AuditReporterAgent._create_report_prompt",
      "TestCase.__eq__",
      "judge_test",
      "AuditReport",
      "QualityMetrics",
      "Calculator.power",
      "AuditReporterAgent",
      "assess_quality",
      "display_analysis",
      "CodeMapperAgent",
      "TestGeneratorAgent._count_assertions_in_code",
      "AuditReporterAgent.generate_report",
      "TestCase.__hash__",
      "TestingFramework._improve_tests_iteratively",
      "__hash__",
      "__eq__",
      "TestingFramework._identify_low_quality_units",
      "calculate_compound_interest",
      "CodeUnit.__eq__",
      "TestDiscoveryAgent._parse_test_file",
      "get_default_provider",
      "_extract_test_code",
      "create_llm",
      "_parse_file",
      "AdvancedCalculator.__init__",
      "_record_calculation",
      "validate_number",
      "discover_tests",
      "TestingFramework.get_codebase_summary",
      "_calculate_complexity",
      "LiteLLMWrapper._call",
      "get_constant",
      "Calculator",
      "TestCase",
      "calculate_score",
      "CodeMapperAgent.map_codebase",
      "_generate_audit_report",
      "AdvancedCalculator",
      "TestAssessorAgent.assess_quality",
      "AdvancedCalculator.get_constant",
      "build_dependency_graph",
      "cos",
      "LLMConfig.get_available_providers",
      "_parse_test_file",
      "format_number",
      "_print_mutation_results",
      "AdvancedCalculator.ln",
      "CodeMapperAgent._parse_file",
      "TestAssessorAgent._assess_test_clarity"
    ],
    "low_quality_tests": [
      "test_calculator_initialization (no assertions)",
      "test_calculator_custom_precision (no assertions)",
      "test_add_operation (no assertions)",
      "test_subtract_operation (no assertions)",
      "test_multiply_operation (no assertions)",
      "test_divide_operation (no assertions)",
      "test_divide_by_zero (no assertions)",
      "test_power_operation (no assertions)",
      "test_square_root_operation (no assertions)",
      "test_square_root_negative (no assertions)",
      "test_factorial_operation (no assertions)",
      "test_factorial_zero (no assertions)",
      "test_factorial_negative (no assertions)",
      "test_average_operation (no assertions)",
      "test_average_empty_list (no assertions)",
      "test_history_recording (no assertions)",
      "test_clear_history (no assertions)",
      "test_get_statistics (no assertions)",
      "test_validate_number_valid (no assertions)",
      "test_validate_number_invalid (no assertions)",
      "test_format_number (no assertions)"
    ]
  },
  "improvements": {
    "coverage_delta": 0.0,
    "mutation_score_delta": 0.0,
    "assertion_density_delta": 0.0,
    "test_clarity_delta": 0.0,
    "complexity_score_delta": 0.0,
    "mock_coverage_delta": 0.0,
    "tests_added": 0,
    "assertions_added": 0
  },
  "recommendations": [
    "Increase test coverage to at least 80%",
    "Improve mutation score by adding more comprehensive assertions",
    "Increase assertion density for better test effectiveness"
  ],
  "generated_tests_count": 0,
  "modified_tests_count": 0
}